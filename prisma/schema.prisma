generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String    @id @default(uuid())
  name      String
  document  String    @unique
  email     String    @unique
  phone     String    @unique
  birthDate DateTime
  password  String
  role      UserRole
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userTokens  UserToken[]
  settings    Setting[]
  categories  Category[]
  Transaction Transaction[]

  @@map("users")
}

model Setting {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  fieldName       String    @map("field_name")
  isFieldEnable   Boolean   @map("is_field_enable")
  isFieldRequired Boolean   @map("is_field_required")
  title           String
  description     String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  User User @relation(fields: [userId], references: [id])

  @@map("settings")
}

model Category {
  id          String    @id @default(uuid())
  categoryId  String?   @map("categories_id")
  userId      String    @map("user_id")
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  relatedCategories Category[] @relation("ParentChild")

  user        User          @relation(fields: [userId], references: [id])
  categories  Category?     @relation("ParentChild", fields: [categoryId], references: [id])
  Transaction Transaction[]

  @@map("categories")
}

model Transaction {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  transactionId     String?  @map("transaction_id")
  categoryId        String   @map("category_id")
  name              String
  description       String?
  transactionDate   DateTime @map("transaction_date")
  status            String
  establishmentName String   @map("establishment_name")
  bankName          String   @map("bank_name")
  paymentMethod     String   @map("payment_method")
  previousBalance   Float    @map("previous_balance")
  totalAmount       Float    @map("total_amount")
  currentBalance    Float    @map("current_balance")

  // Optional configuration settings
  competencyDate                   DateTime? @map("competency_date") // Define o momento específico do direito ao recebimento de uma receita
  costCenter                       String?   @map("cost_center") // Centros de custo e lucros
  tags                             String?   @map("tags") // Categoriza lançamentos para organização e facilidade de acesso
  enablePasswordProtection         Boolean   @default(false) @map("enable_password_protection")
  installmentConfiguration         Boolean   @default(false) @map("installment_configuration")
  includeResidualBalancesInReports Boolean   @default(false) @map("include_residual_balances_in_reports")
  documentNumber                   String?   @map("document_number") // Número de documento para rastreamento
  enableReceiptExpenseGoals        Boolean   @default(false) @map("enable_receipt_expense_goals")
  associatedContracts              String?   @map("associated_contracts")
  associatedProjects               String?   @map("associated_projects")
  additionalComments               String?   @map("additional_comments")
  // Optional configuration settings

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}


model UserToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique @db.Uuid
  code      String
  usage     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("users_tokens")
}

model File {
  id          String    @id @default(cuid())
  key         String
  name        String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("files")
}

